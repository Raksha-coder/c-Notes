
Question :  /* You are given a list of items sold in a store.

Each item is represented as a string with the item name and its price separated by a colon, like Apple:2.5.

Write a program that parses these strings and calculates the total income from all the sales.

Make sure to use const to represent the separator character (colon), and readonly to store the list of items sold.

The program should also handle edge cases such as incorrect formats, negative prices, and missing prices.

*/





using System;
using System.Collections.Generic;
using System.Linq;

namespace Coding.Exercise
{
    public class SalesAnalysis
    {
        // readonly to store the list of items sold
        public readonly List<string> ItemsSold;

        // const to represent the separator character
        public const char Separator = ':';

        public SalesAnalysis(List<string> itemsSold)
        {
            ItemsSold = itemsSold;
        }
        
       
        
        
        public  double ComputeTotalIncome()
        {
            // WRITE CODE HERE
            if (ItemsSold == null || !ItemsSold.Any()) return 0;
            
            
            double[] values = new double[ItemsSold.Count];
            
            for(int i=0 ; i<values.Length;i++){
                
                int index = ItemsSold[i].IndexOf(Separator);
                 if(index < 0){
                         continue;
                }
                var see = ItemsSold[i].Substring(index+1);
                //when price is missing.
                if(string.IsNullOrWhiteSpace(see)){
                    continue;
                }
               
                // FORMAT :  IF USER ENTER OTHER THAN NUMBER;
                    values[i] = Convert.ToDouble(see);
                    
          
            }
            
            double sum =0 ;
            for(int i=0 ; i<values.Length;i++){
            
            // to check if values are negative.
                if(values[i] <= 0){
                    continue;
                }
                    sum = sum + values[i];

            }
            return  sum;
        }
    }
}
